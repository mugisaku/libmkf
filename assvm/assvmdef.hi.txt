global_scope = (declaration|";"):{declaration|";"};


statement =
                    ";"|
                 'halt'|
        print_statement|
      control_statement|
            declaration|
                  block|
     (expression:[";"]);




declaration = 
  function_declaration|
    object_declaration;




control_statement =
        if_statement|
        do_statement|
    return_statement|
     break_statement|
  continue_statement|
     label_statement;




print_statement = 'print':(expression|value);


enum_declaration = 'enum':"{":enumerator:{",":enumerator}:"}";
enumerator = identifier:["=":(expression|value)];




break_statement    =    'break':[";"];
continue_statement = 'continue':[";"];
label_statement    = identifier:":";
return_statement   = 'return':[expression|value]:[";"];




do_statement = 'do':block;




if_statement = 'if':conditional_block:{'else':'if':conditional_block}:['else':block];

conditional_block = "(":(expression|value):")":block;

block = "{":{statement}:"}";




expression = unary_operand:{binary_operator:unary_operand};

unary_operand = {unary_operator}:value;




function_declaration = 'function':identifier:":":type:"(":[parameter:{",":parameter}]:")":block;

parameter = type:[identifier];




object_declaration = ['static']:['const']:type:identifier:["=":(expression|value)];


value = (
             'nullptr'|
                'true'|
               'false'|
  ("(":expression:")")|
            value_list|
            identifier|
       integer_literal|
     character_literal|
        string_literal):[subscript|argument_list];


type = type_kind:{"*"|array_size}:["&"];


type_kind = 
     'void'|
     'null'|
     'bool'|
     'char'|
     'int8'|
    'uint8'|
    'int16'|
   'uint16'|
    'int32'|
      'int';




array_size = "[":[expression|value]:"]";
subscript  = "[":[expression|value]:"]";

argument_list = "(":[(expression|value):{",":(expression|value)}]:")";
   value_list = "{":[(expression|value):{",":(expression|value)}]:"}";



integer_literal = hex_literal|binary_literal|decimal_literal;


noskip decimal_literal = "0"|natural_number;
noskip hex_literal     = "0x":CTYPE_xdigit:{CTYPE_xdigit};
noskip binary_literal  = "0b":zero_or_one:{zero_or_one};


natural_number  = one_to_nine:{CTYPE_digit};
one_to_nine     = "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9";
zero_or_one     = "0"|"1";


binary_operator =
  "<<="|
  "<<" |
  "<=" |
  "<"  |
  ">>="|
  ">>" |
  ">=" |
  ">"  |
  "+=" |
  "+"  |
  "-=" |
  "-"  |
  "*=" |
  "*"  |
  "/=" |
  "/"  |
  "%=" |
  "%"  |
  "||" |
  "|=" |
  "|"  |
  "&&" |
  "&=" |
  "&"  |
  "==" |
  "="  |
  "^=" |
  "^"  |
  "!=" |
  "."  ;


unary_operator =
     "!"|
     "~"|
     "-"|
     "*"|
     "&";




identifier = ("_"|CTYPE_alpha):{"_"|CTYPE_alnum};




character_literal = "\'":string_element:"\'";

noskip  string_literal = "\"":{string_element}:"\"";


string_element =
                         " "|
               CTYPE_unicode|
              null_character|
           newline_character|
         backslash_character|
      single_quote_character|
      double_quote_character|
            normal_character;


normal_character =
  CTYPE_alnum|
          "!"|
          "#"|
          "$"|
          "%"|
          "&"|
          "("|
          ")"|
          "="|
          "~"|
          "|"|
          "@"|
          "["|
          "]"|
          "{"|
          "}"|
          ":"|
          ";"|
          "*"|
          "+"|
          "-"|
          "`"|
          "<"|
          ">"|
          "?"|
          "_"|
          ","|
          "."|
          "/";


null_character         = "\\0";
newline_character      = "\\n";
backslash_character    = "\\\\";
single_quote_character = "\\\'";
double_quote_character = "\\\"";




